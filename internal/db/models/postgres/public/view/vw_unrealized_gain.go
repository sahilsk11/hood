//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VwUnrealizedGain = newVwUnrealizedGainTable("public", "vw_unrealized_gain", "")

type vwUnrealizedGainTable struct {
	postgres.Table

	//Columns
	Symbol          postgres.ColumnString
	Quantity        postgres.ColumnFloat
	UnrealizedGains postgres.ColumnFloat
	GainsType       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VwUnrealizedGainTable struct {
	vwUnrealizedGainTable

	EXCLUDED vwUnrealizedGainTable
}

// AS creates new VwUnrealizedGainTable with assigned alias
func (a VwUnrealizedGainTable) AS(alias string) *VwUnrealizedGainTable {
	return newVwUnrealizedGainTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VwUnrealizedGainTable with assigned schema name
func (a VwUnrealizedGainTable) FromSchema(schemaName string) *VwUnrealizedGainTable {
	return newVwUnrealizedGainTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VwUnrealizedGainTable with assigned table prefix
func (a VwUnrealizedGainTable) WithPrefix(prefix string) *VwUnrealizedGainTable {
	return newVwUnrealizedGainTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VwUnrealizedGainTable with assigned table suffix
func (a VwUnrealizedGainTable) WithSuffix(suffix string) *VwUnrealizedGainTable {
	return newVwUnrealizedGainTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVwUnrealizedGainTable(schemaName, tableName, alias string) *VwUnrealizedGainTable {
	return &VwUnrealizedGainTable{
		vwUnrealizedGainTable: newVwUnrealizedGainTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newVwUnrealizedGainTableImpl("", "excluded", ""),
	}
}

func newVwUnrealizedGainTableImpl(schemaName, tableName, alias string) vwUnrealizedGainTable {
	var (
		SymbolColumn          = postgres.StringColumn("symbol")
		QuantityColumn        = postgres.FloatColumn("quantity")
		UnrealizedGainsColumn = postgres.FloatColumn("unrealized_gains")
		GainsTypeColumn       = postgres.StringColumn("gains_type")
		allColumns            = postgres.ColumnList{SymbolColumn, QuantityColumn, UnrealizedGainsColumn, GainsTypeColumn}
		mutableColumns        = postgres.ColumnList{SymbolColumn, QuantityColumn, UnrealizedGainsColumn, GainsTypeColumn}
	)

	return vwUnrealizedGainTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Symbol:          SymbolColumn,
		Quantity:        QuantityColumn,
		UnrealizedGains: UnrealizedGainsColumn,
		GainsType:       GainsTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
