//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VwOpenLot = newVwOpenLotTable("public", "vw_open_lot", "")

type vwOpenLotTable struct {
	postgres.Table

	//Columns
	OpenLotID    postgres.ColumnInteger
	Symbol       postgres.ColumnString
	Quantity     postgres.ColumnFloat
	CostBasis    postgres.ColumnFloat
	PurchaseDate postgres.ColumnTimestampz
	HoldingType  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VwOpenLotTable struct {
	vwOpenLotTable

	EXCLUDED vwOpenLotTable
}

// AS creates new VwOpenLotTable with assigned alias
func (a VwOpenLotTable) AS(alias string) *VwOpenLotTable {
	return newVwOpenLotTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VwOpenLotTable with assigned schema name
func (a VwOpenLotTable) FromSchema(schemaName string) *VwOpenLotTable {
	return newVwOpenLotTable(schemaName, a.TableName(), a.Alias())
}

func newVwOpenLotTable(schemaName, tableName, alias string) *VwOpenLotTable {
	return &VwOpenLotTable{
		vwOpenLotTable: newVwOpenLotTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newVwOpenLotTableImpl("", "excluded", ""),
	}
}

func newVwOpenLotTableImpl(schemaName, tableName, alias string) vwOpenLotTable {
	var (
		OpenLotIDColumn    = postgres.IntegerColumn("open_lot_id")
		SymbolColumn       = postgres.StringColumn("symbol")
		QuantityColumn     = postgres.FloatColumn("quantity")
		CostBasisColumn    = postgres.FloatColumn("cost_basis")
		PurchaseDateColumn = postgres.TimestampzColumn("purchase_date")
		HoldingTypeColumn  = postgres.StringColumn("holding_type")
		allColumns         = postgres.ColumnList{OpenLotIDColumn, SymbolColumn, QuantityColumn, CostBasisColumn, PurchaseDateColumn, HoldingTypeColumn}
		mutableColumns     = postgres.ColumnList{OpenLotIDColumn, SymbolColumn, QuantityColumn, CostBasisColumn, PurchaseDateColumn, HoldingTypeColumn}
	)

	return vwOpenLotTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		OpenLotID:    OpenLotIDColumn,
		Symbol:       SymbolColumn,
		Quantity:     QuantityColumn,
		CostBasis:    CostBasisColumn,
		PurchaseDate: PurchaseDateColumn,
		HoldingType:  HoldingTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
