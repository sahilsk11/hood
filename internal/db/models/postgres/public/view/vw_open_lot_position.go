//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VwOpenLotPosition = newVwOpenLotPositionTable("public", "vw_open_lot_position", "")

type vwOpenLotPositionTable struct {
	postgres.Table

	//Columns
	OpenLotID       postgres.ColumnInteger
	Symbol          postgres.ColumnString
	Quantity        postgres.ColumnFloat
	PurchaseDate    postgres.ColumnDate
	CostBasis       postgres.ColumnFloat
	UnrealizedGains postgres.ColumnFloat
	GainsType       postgres.ColumnString
	Price           postgres.ColumnFloat
	PriceUpdatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VwOpenLotPositionTable struct {
	vwOpenLotPositionTable

	EXCLUDED vwOpenLotPositionTable
}

// AS creates new VwOpenLotPositionTable with assigned alias
func (a VwOpenLotPositionTable) AS(alias string) *VwOpenLotPositionTable {
	return newVwOpenLotPositionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VwOpenLotPositionTable with assigned schema name
func (a VwOpenLotPositionTable) FromSchema(schemaName string) *VwOpenLotPositionTable {
	return newVwOpenLotPositionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VwOpenLotPositionTable with assigned table prefix
func (a VwOpenLotPositionTable) WithPrefix(prefix string) *VwOpenLotPositionTable {
	return newVwOpenLotPositionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VwOpenLotPositionTable with assigned table suffix
func (a VwOpenLotPositionTable) WithSuffix(suffix string) *VwOpenLotPositionTable {
	return newVwOpenLotPositionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVwOpenLotPositionTable(schemaName, tableName, alias string) *VwOpenLotPositionTable {
	return &VwOpenLotPositionTable{
		vwOpenLotPositionTable: newVwOpenLotPositionTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newVwOpenLotPositionTableImpl("", "excluded", ""),
	}
}

func newVwOpenLotPositionTableImpl(schemaName, tableName, alias string) vwOpenLotPositionTable {
	var (
		OpenLotIDColumn       = postgres.IntegerColumn("open_lot_id")
		SymbolColumn          = postgres.StringColumn("symbol")
		QuantityColumn        = postgres.FloatColumn("quantity")
		PurchaseDateColumn    = postgres.DateColumn("purchase_date")
		CostBasisColumn       = postgres.FloatColumn("cost_basis")
		UnrealizedGainsColumn = postgres.FloatColumn("unrealized_gains")
		GainsTypeColumn       = postgres.StringColumn("gains_type")
		PriceColumn           = postgres.FloatColumn("price")
		PriceUpdatedAtColumn  = postgres.TimestampzColumn("price_updated_at")
		allColumns            = postgres.ColumnList{OpenLotIDColumn, SymbolColumn, QuantityColumn, PurchaseDateColumn, CostBasisColumn, UnrealizedGainsColumn, GainsTypeColumn, PriceColumn, PriceUpdatedAtColumn}
		mutableColumns        = postgres.ColumnList{OpenLotIDColumn, SymbolColumn, QuantityColumn, PurchaseDateColumn, CostBasisColumn, UnrealizedGainsColumn, GainsTypeColumn, PriceColumn, PriceUpdatedAtColumn}
	)

	return vwOpenLotPositionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		OpenLotID:       OpenLotIDColumn,
		Symbol:          SymbolColumn,
		Quantity:        QuantityColumn,
		PurchaseDate:    PurchaseDateColumn,
		CostBasis:       CostBasisColumn,
		UnrealizedGains: UnrealizedGainsColumn,
		GainsType:       GainsTypeColumn,
		Price:           PriceColumn,
		PriceUpdatedAt:  PriceUpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
