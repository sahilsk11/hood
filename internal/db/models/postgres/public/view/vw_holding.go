//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VwHolding = newVwHoldingTable("public", "vw_holding", "")

type vwHoldingTable struct {
	postgres.Table

	//Columns
	Symbol   postgres.ColumnString
	Quantity postgres.ColumnFloat
	NumLots  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VwHoldingTable struct {
	vwHoldingTable

	EXCLUDED vwHoldingTable
}

// AS creates new VwHoldingTable with assigned alias
func (a VwHoldingTable) AS(alias string) *VwHoldingTable {
	return newVwHoldingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VwHoldingTable with assigned schema name
func (a VwHoldingTable) FromSchema(schemaName string) *VwHoldingTable {
	return newVwHoldingTable(schemaName, a.TableName(), a.Alias())
}

func newVwHoldingTable(schemaName, tableName, alias string) *VwHoldingTable {
	return &VwHoldingTable{
		vwHoldingTable: newVwHoldingTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newVwHoldingTableImpl("", "excluded", ""),
	}
}

func newVwHoldingTableImpl(schemaName, tableName, alias string) vwHoldingTable {
	var (
		SymbolColumn   = postgres.StringColumn("symbol")
		QuantityColumn = postgres.FloatColumn("quantity")
		NumLotsColumn  = postgres.IntegerColumn("num_lots")
		allColumns     = postgres.ColumnList{SymbolColumn, QuantityColumn, NumLotsColumn}
		mutableColumns = postgres.ColumnList{SymbolColumn, QuantityColumn, NumLotsColumn}
	)

	return vwHoldingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Symbol:   SymbolColumn,
		Quantity: QuantityColumn,
		NumLots:  NumLotsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
