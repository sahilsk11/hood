//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AppliedAssetSplit = newAppliedAssetSplitTable("public", "applied_asset_split", "")

type appliedAssetSplitTable struct {
	postgres.Table

	//Columns
	AppliedAssetSplitID postgres.ColumnInteger
	AssetSplitID        postgres.ColumnInteger
	OpenLotID           postgres.ColumnInteger
	AppliedAt           postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AppliedAssetSplitTable struct {
	appliedAssetSplitTable

	EXCLUDED appliedAssetSplitTable
}

// AS creates new AppliedAssetSplitTable with assigned alias
func (a AppliedAssetSplitTable) AS(alias string) *AppliedAssetSplitTable {
	return newAppliedAssetSplitTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppliedAssetSplitTable with assigned schema name
func (a AppliedAssetSplitTable) FromSchema(schemaName string) *AppliedAssetSplitTable {
	return newAppliedAssetSplitTable(schemaName, a.TableName(), a.Alias())
}

func newAppliedAssetSplitTable(schemaName, tableName, alias string) *AppliedAssetSplitTable {
	return &AppliedAssetSplitTable{
		appliedAssetSplitTable: newAppliedAssetSplitTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newAppliedAssetSplitTableImpl("", "excluded", ""),
	}
}

func newAppliedAssetSplitTableImpl(schemaName, tableName, alias string) appliedAssetSplitTable {
	var (
		AppliedAssetSplitIDColumn = postgres.IntegerColumn("applied_asset_split_id")
		AssetSplitIDColumn        = postgres.IntegerColumn("asset_split_id")
		OpenLotIDColumn           = postgres.IntegerColumn("open_lot_id")
		AppliedAtColumn           = postgres.TimestampzColumn("applied_at")
		allColumns                = postgres.ColumnList{AppliedAssetSplitIDColumn, AssetSplitIDColumn, OpenLotIDColumn, AppliedAtColumn}
		mutableColumns            = postgres.ColumnList{AssetSplitIDColumn, OpenLotIDColumn, AppliedAtColumn}
	)

	return appliedAssetSplitTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppliedAssetSplitID: AppliedAssetSplitIDColumn,
		AssetSplitID:        AssetSplitIDColumn,
		OpenLotID:           OpenLotIDColumn,
		AppliedAt:           AppliedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
