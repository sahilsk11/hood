//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SchemaVersion = newSchemaVersionTable("public", "schema_version", "")

type schemaVersionTable struct {
	postgres.Table

	//Columns
	Version postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SchemaVersionTable struct {
	schemaVersionTable

	EXCLUDED schemaVersionTable
}

// AS creates new SchemaVersionTable with assigned alias
func (a SchemaVersionTable) AS(alias string) *SchemaVersionTable {
	return newSchemaVersionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SchemaVersionTable with assigned schema name
func (a SchemaVersionTable) FromSchema(schemaName string) *SchemaVersionTable {
	return newSchemaVersionTable(schemaName, a.TableName(), a.Alias())
}

func newSchemaVersionTable(schemaName, tableName, alias string) *SchemaVersionTable {
	return &SchemaVersionTable{
		schemaVersionTable: newSchemaVersionTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newSchemaVersionTableImpl("", "excluded", ""),
	}
}

func newSchemaVersionTableImpl(schemaName, tableName, alias string) schemaVersionTable {
	var (
		VersionColumn  = postgres.IntegerColumn("version")
		allColumns     = postgres.ColumnList{VersionColumn}
		mutableColumns = postgres.ColumnList{VersionColumn}
	)

	return schemaVersionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version: VersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
