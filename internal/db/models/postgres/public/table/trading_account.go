//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TradingAccount = newTradingAccountTable("public", "trading_account", "")

type tradingAccountTable struct {
	postgres.Table

	//Columns
	TradingAccountID postgres.ColumnString
	UserID           postgres.ColumnString
	Custodian        postgres.ColumnString
	AccountType      postgres.ColumnString
	CreatedAt        postgres.ColumnTimestampz
	Name             postgres.ColumnString
	DataSource       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TradingAccountTable struct {
	tradingAccountTable

	EXCLUDED tradingAccountTable
}

// AS creates new TradingAccountTable with assigned alias
func (a TradingAccountTable) AS(alias string) *TradingAccountTable {
	return newTradingAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TradingAccountTable with assigned schema name
func (a TradingAccountTable) FromSchema(schemaName string) *TradingAccountTable {
	return newTradingAccountTable(schemaName, a.TableName(), a.Alias())
}

func newTradingAccountTable(schemaName, tableName, alias string) *TradingAccountTable {
	return &TradingAccountTable{
		tradingAccountTable: newTradingAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newTradingAccountTableImpl("", "excluded", ""),
	}
}

func newTradingAccountTableImpl(schemaName, tableName, alias string) tradingAccountTable {
	var (
		TradingAccountIDColumn = postgres.StringColumn("trading_account_id")
		UserIDColumn           = postgres.StringColumn("user_id")
		CustodianColumn        = postgres.StringColumn("custodian")
		AccountTypeColumn      = postgres.StringColumn("account_type")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		NameColumn             = postgres.StringColumn("name")
		DataSourceColumn       = postgres.StringColumn("data_source")
		allColumns             = postgres.ColumnList{TradingAccountIDColumn, UserIDColumn, CustodianColumn, AccountTypeColumn, CreatedAtColumn, NameColumn, DataSourceColumn}
		mutableColumns         = postgres.ColumnList{UserIDColumn, CustodianColumn, AccountTypeColumn, CreatedAtColumn, NameColumn, DataSourceColumn}
	)

	return tradingAccountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TradingAccountID: TradingAccountIDColumn,
		UserID:           UserIDColumn,
		Custodian:        CustodianColumn,
		AccountType:      AccountTypeColumn,
		CreatedAt:        CreatedAtColumn,
		Name:             NameColumn,
		DataSource:       DataSourceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
