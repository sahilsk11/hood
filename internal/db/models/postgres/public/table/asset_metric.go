//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AssetMetric = newAssetMetricTable("public", "asset_metric", "")

type assetMetricTable struct {
	postgres.Table

	//Columns
	AssetMetricID                           postgres.ColumnInteger
	Symbol                                  postgres.ColumnString
	FullName                                postgres.ColumnString
	Price                                   postgres.ColumnFloat
	PriceUpdatedAt                          postgres.ColumnTimestampz
	EarningsPerShareAnnualTrailing          postgres.ColumnFloat
	EarningsPerShareAnnualTrailingUpdatedAt postgres.ColumnTimestampz
	DividendYieldAnnualTrailing             postgres.ColumnFloat
	DividendYieldAnnualTrailingUpdatedAt    postgres.ColumnTimestampz
	PeRatioTrailing                         postgres.ColumnFloat
	BookValue                               postgres.ColumnFloat
	PriceToBookRatio                        postgres.ColumnFloat
	SharesOutstanding                       postgres.ColumnFloat
	MarketCap                               postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AssetMetricTable struct {
	assetMetricTable

	EXCLUDED assetMetricTable
}

// AS creates new AssetMetricTable with assigned alias
func (a AssetMetricTable) AS(alias string) *AssetMetricTable {
	return newAssetMetricTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AssetMetricTable with assigned schema name
func (a AssetMetricTable) FromSchema(schemaName string) *AssetMetricTable {
	return newAssetMetricTable(schemaName, a.TableName(), a.Alias())
}

func newAssetMetricTable(schemaName, tableName, alias string) *AssetMetricTable {
	return &AssetMetricTable{
		assetMetricTable: newAssetMetricTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAssetMetricTableImpl("", "excluded", ""),
	}
}

func newAssetMetricTableImpl(schemaName, tableName, alias string) assetMetricTable {
	var (
		AssetMetricIDColumn                           = postgres.IntegerColumn("asset_metric_id")
		SymbolColumn                                  = postgres.StringColumn("symbol")
		FullNameColumn                                = postgres.StringColumn("full_name")
		PriceColumn                                   = postgres.FloatColumn("price")
		PriceUpdatedAtColumn                          = postgres.TimestampzColumn("price_updated_at")
		EarningsPerShareAnnualTrailingColumn          = postgres.FloatColumn("earnings_per_share_annual_trailing")
		EarningsPerShareAnnualTrailingUpdatedAtColumn = postgres.TimestampzColumn("earnings_per_share_annual_trailing_updated_at")
		DividendYieldAnnualTrailingColumn             = postgres.FloatColumn("dividend_yield_annual_trailing")
		DividendYieldAnnualTrailingUpdatedAtColumn    = postgres.TimestampzColumn("dividend_yield_annual_trailing_updated_at")
		PeRatioTrailingColumn                         = postgres.FloatColumn("pe_ratio_trailing")
		BookValueColumn                               = postgres.FloatColumn("book_value")
		PriceToBookRatioColumn                        = postgres.FloatColumn("price_to_book_ratio")
		SharesOutstandingColumn                       = postgres.FloatColumn("shares_outstanding")
		MarketCapColumn                               = postgres.FloatColumn("market_cap")
		allColumns                                    = postgres.ColumnList{AssetMetricIDColumn, SymbolColumn, FullNameColumn, PriceColumn, PriceUpdatedAtColumn, EarningsPerShareAnnualTrailingColumn, EarningsPerShareAnnualTrailingUpdatedAtColumn, DividendYieldAnnualTrailingColumn, DividendYieldAnnualTrailingUpdatedAtColumn, PeRatioTrailingColumn, BookValueColumn, PriceToBookRatioColumn, SharesOutstandingColumn, MarketCapColumn}
		mutableColumns                                = postgres.ColumnList{SymbolColumn, FullNameColumn, PriceColumn, PriceUpdatedAtColumn, EarningsPerShareAnnualTrailingColumn, EarningsPerShareAnnualTrailingUpdatedAtColumn, DividendYieldAnnualTrailingColumn, DividendYieldAnnualTrailingUpdatedAtColumn, PeRatioTrailingColumn, BookValueColumn, PriceToBookRatioColumn, SharesOutstandingColumn, MarketCapColumn}
	)

	return assetMetricTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AssetMetricID:                           AssetMetricIDColumn,
		Symbol:                                  SymbolColumn,
		FullName:                                FullNameColumn,
		Price:                                   PriceColumn,
		PriceUpdatedAt:                          PriceUpdatedAtColumn,
		EarningsPerShareAnnualTrailing:          EarningsPerShareAnnualTrailingColumn,
		EarningsPerShareAnnualTrailingUpdatedAt: EarningsPerShareAnnualTrailingUpdatedAtColumn,
		DividendYieldAnnualTrailing:             DividendYieldAnnualTrailingColumn,
		DividendYieldAnnualTrailingUpdatedAt:    DividendYieldAnnualTrailingUpdatedAtColumn,
		PeRatioTrailing:                         PeRatioTrailingColumn,
		BookValue:                               BookValueColumn,
		PriceToBookRatio:                        PriceToBookRatioColumn,
		SharesOutstanding:                       SharesOutstandingColumn,
		MarketCap:                               MarketCapColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
