//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BankActivity = newBankActivityTable("public", "bank_activity", "")

type bankActivityTable struct {
	postgres.Table

	//Columns
	ActivityID   postgres.ColumnInteger
	Amount       postgres.ColumnFloat
	ActivityType postgres.ColumnString
	Date         postgres.ColumnDate
	CreatedAt    postgres.ColumnTimestampz
	ModifiedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BankActivityTable struct {
	bankActivityTable

	EXCLUDED bankActivityTable
}

// AS creates new BankActivityTable with assigned alias
func (a BankActivityTable) AS(alias string) *BankActivityTable {
	return newBankActivityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BankActivityTable with assigned schema name
func (a BankActivityTable) FromSchema(schemaName string) *BankActivityTable {
	return newBankActivityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BankActivityTable with assigned table prefix
func (a BankActivityTable) WithPrefix(prefix string) *BankActivityTable {
	return newBankActivityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BankActivityTable with assigned table suffix
func (a BankActivityTable) WithSuffix(suffix string) *BankActivityTable {
	return newBankActivityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBankActivityTable(schemaName, tableName, alias string) *BankActivityTable {
	return &BankActivityTable{
		bankActivityTable: newBankActivityTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newBankActivityTableImpl("", "excluded", ""),
	}
}

func newBankActivityTableImpl(schemaName, tableName, alias string) bankActivityTable {
	var (
		ActivityIDColumn   = postgres.IntegerColumn("activity_id")
		AmountColumn       = postgres.FloatColumn("amount")
		ActivityTypeColumn = postgres.StringColumn("activity_type")
		DateColumn         = postgres.DateColumn("date")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		ModifiedAtColumn   = postgres.TimestampzColumn("modified_at")
		allColumns         = postgres.ColumnList{ActivityIDColumn, AmountColumn, ActivityTypeColumn, DateColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns     = postgres.ColumnList{AmountColumn, ActivityTypeColumn, DateColumn, CreatedAtColumn, ModifiedAtColumn}
	)

	return bankActivityTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ActivityID:   ActivityIDColumn,
		Amount:       AmountColumn,
		ActivityType: ActivityTypeColumn,
		Date:         DateColumn,
		CreatedAt:    CreatedAtColumn,
		ModifiedAt:   ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
