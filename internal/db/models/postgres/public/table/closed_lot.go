//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ClosedLot = newClosedLotTable("public", "closed_lot", "")

type closedLotTable struct {
	postgres.Table

	//Columns
	ClosedLotID   postgres.ColumnInteger
	BuyTradeID    postgres.ColumnInteger
	SellTradeID   postgres.ColumnInteger
	Quantity      postgres.ColumnFloat
	RealizedGains postgres.ColumnFloat
	GainsType     postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	ModifiedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClosedLotTable struct {
	closedLotTable

	EXCLUDED closedLotTable
}

// AS creates new ClosedLotTable with assigned alias
func (a ClosedLotTable) AS(alias string) *ClosedLotTable {
	return newClosedLotTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClosedLotTable with assigned schema name
func (a ClosedLotTable) FromSchema(schemaName string) *ClosedLotTable {
	return newClosedLotTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClosedLotTable with assigned table prefix
func (a ClosedLotTable) WithPrefix(prefix string) *ClosedLotTable {
	return newClosedLotTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClosedLotTable with assigned table suffix
func (a ClosedLotTable) WithSuffix(suffix string) *ClosedLotTable {
	return newClosedLotTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClosedLotTable(schemaName, tableName, alias string) *ClosedLotTable {
	return &ClosedLotTable{
		closedLotTable: newClosedLotTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newClosedLotTableImpl("", "excluded", ""),
	}
}

func newClosedLotTableImpl(schemaName, tableName, alias string) closedLotTable {
	var (
		ClosedLotIDColumn   = postgres.IntegerColumn("closed_lot_id")
		BuyTradeIDColumn    = postgres.IntegerColumn("buy_trade_id")
		SellTradeIDColumn   = postgres.IntegerColumn("sell_trade_id")
		QuantityColumn      = postgres.FloatColumn("quantity")
		RealizedGainsColumn = postgres.FloatColumn("realized_gains")
		GainsTypeColumn     = postgres.StringColumn("gains_type")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		ModifiedAtColumn    = postgres.TimestampzColumn("modified_at")
		allColumns          = postgres.ColumnList{ClosedLotIDColumn, BuyTradeIDColumn, SellTradeIDColumn, QuantityColumn, RealizedGainsColumn, GainsTypeColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns      = postgres.ColumnList{BuyTradeIDColumn, SellTradeIDColumn, QuantityColumn, RealizedGainsColumn, GainsTypeColumn, CreatedAtColumn, ModifiedAtColumn}
	)

	return closedLotTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ClosedLotID:   ClosedLotIDColumn,
		BuyTradeID:    BuyTradeIDColumn,
		SellTradeID:   SellTradeIDColumn,
		Quantity:      QuantityColumn,
		RealizedGains: RealizedGainsColumn,
		GainsType:     GainsTypeColumn,
		CreatedAt:     CreatedAtColumn,
		ModifiedAt:    ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
