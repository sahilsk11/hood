//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ImmutableOpenLot = newImmutableOpenLotTable("public", "immutable_open_lot", "")

type immutableOpenLotTable struct {
	postgres.Table

	//Columns
	OpenLotID postgres.ColumnInteger
	CostBasis postgres.ColumnFloat
	Quantity  postgres.ColumnFloat
	TradeID   postgres.ColumnInteger
	Date      postgres.ColumnTimestampz
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ImmutableOpenLotTable struct {
	immutableOpenLotTable

	EXCLUDED immutableOpenLotTable
}

// AS creates new ImmutableOpenLotTable with assigned alias
func (a ImmutableOpenLotTable) AS(alias string) *ImmutableOpenLotTable {
	return newImmutableOpenLotTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImmutableOpenLotTable with assigned schema name
func (a ImmutableOpenLotTable) FromSchema(schemaName string) *ImmutableOpenLotTable {
	return newImmutableOpenLotTable(schemaName, a.TableName(), a.Alias())
}

func newImmutableOpenLotTable(schemaName, tableName, alias string) *ImmutableOpenLotTable {
	return &ImmutableOpenLotTable{
		immutableOpenLotTable: newImmutableOpenLotTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newImmutableOpenLotTableImpl("", "excluded", ""),
	}
}

func newImmutableOpenLotTableImpl(schemaName, tableName, alias string) immutableOpenLotTable {
	var (
		OpenLotIDColumn = postgres.IntegerColumn("open_lot_id")
		CostBasisColumn = postgres.FloatColumn("cost_basis")
		QuantityColumn  = postgres.FloatColumn("quantity")
		TradeIDColumn   = postgres.IntegerColumn("trade_id")
		DateColumn      = postgres.TimestampzColumn("date")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{OpenLotIDColumn, CostBasisColumn, QuantityColumn, TradeIDColumn, DateColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{CostBasisColumn, QuantityColumn, TradeIDColumn, DateColumn, CreatedAtColumn}
	)

	return immutableOpenLotTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		OpenLotID: OpenLotIDColumn,
		CostBasis: CostBasisColumn,
		Quantity:  QuantityColumn,
		TradeID:   TradeIDColumn,
		Date:      DateColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
