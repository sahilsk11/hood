//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PlaidTradeMetadata = newPlaidTradeMetadataTable("public", "plaid_trade_metadata", "")

type plaidTradeMetadataTable struct {
	postgres.Table

	//Columns
	PlaidTradeMetadataID         postgres.ColumnString
	TradeID                      postgres.ColumnInteger
	PlaidInvestmentTransactionID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlaidTradeMetadataTable struct {
	plaidTradeMetadataTable

	EXCLUDED plaidTradeMetadataTable
}

// AS creates new PlaidTradeMetadataTable with assigned alias
func (a PlaidTradeMetadataTable) AS(alias string) *PlaidTradeMetadataTable {
	return newPlaidTradeMetadataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlaidTradeMetadataTable with assigned schema name
func (a PlaidTradeMetadataTable) FromSchema(schemaName string) *PlaidTradeMetadataTable {
	return newPlaidTradeMetadataTable(schemaName, a.TableName(), a.Alias())
}

func newPlaidTradeMetadataTable(schemaName, tableName, alias string) *PlaidTradeMetadataTable {
	return &PlaidTradeMetadataTable{
		plaidTradeMetadataTable: newPlaidTradeMetadataTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newPlaidTradeMetadataTableImpl("", "excluded", ""),
	}
}

func newPlaidTradeMetadataTableImpl(schemaName, tableName, alias string) plaidTradeMetadataTable {
	var (
		PlaidTradeMetadataIDColumn         = postgres.StringColumn("plaid_trade_metadata_id")
		TradeIDColumn                      = postgres.IntegerColumn("trade_id")
		PlaidInvestmentTransactionIDColumn = postgres.StringColumn("plaid_investment_transaction_id")
		allColumns                         = postgres.ColumnList{PlaidTradeMetadataIDColumn, TradeIDColumn, PlaidInvestmentTransactionIDColumn}
		mutableColumns                     = postgres.ColumnList{TradeIDColumn, PlaidInvestmentTransactionIDColumn}
	)

	return plaidTradeMetadataTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PlaidTradeMetadataID:         PlaidTradeMetadataIDColumn,
		TradeID:                      TradeIDColumn,
		PlaidInvestmentTransactionID: PlaidInvestmentTransactionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
