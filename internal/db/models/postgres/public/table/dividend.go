//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Dividend = newDividendTable("public", "dividend", "")

type dividendTable struct {
	postgres.Table

	//Columns
	TradeID    postgres.ColumnInteger
	Amount     postgres.ColumnFloat
	Symbol     postgres.ColumnString
	Date       postgres.ColumnDate
	CreatedAt  postgres.ColumnTimestampz
	ModifiedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DividendTable struct {
	dividendTable

	EXCLUDED dividendTable
}

// AS creates new DividendTable with assigned alias
func (a DividendTable) AS(alias string) *DividendTable {
	return newDividendTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DividendTable with assigned schema name
func (a DividendTable) FromSchema(schemaName string) *DividendTable {
	return newDividendTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DividendTable with assigned table prefix
func (a DividendTable) WithPrefix(prefix string) *DividendTable {
	return newDividendTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DividendTable with assigned table suffix
func (a DividendTable) WithSuffix(suffix string) *DividendTable {
	return newDividendTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDividendTable(schemaName, tableName, alias string) *DividendTable {
	return &DividendTable{
		dividendTable: newDividendTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newDividendTableImpl("", "excluded", ""),
	}
}

func newDividendTableImpl(schemaName, tableName, alias string) dividendTable {
	var (
		TradeIDColumn    = postgres.IntegerColumn("trade_id")
		AmountColumn     = postgres.FloatColumn("amount")
		SymbolColumn     = postgres.StringColumn("symbol")
		DateColumn       = postgres.DateColumn("date")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		ModifiedAtColumn = postgres.TimestampzColumn("modified_at")
		allColumns       = postgres.ColumnList{TradeIDColumn, AmountColumn, SymbolColumn, DateColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns   = postgres.ColumnList{AmountColumn, SymbolColumn, DateColumn, CreatedAtColumn, ModifiedAtColumn}
	)

	return dividendTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TradeID:    TradeIDColumn,
		Amount:     AmountColumn,
		Symbol:     SymbolColumn,
		Date:       DateColumn,
		CreatedAt:  CreatedAtColumn,
		ModifiedAt: ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
